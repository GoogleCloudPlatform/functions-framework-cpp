# WARNING: DO NOT EDIT THIS FILE
# This file is automatically generated by ./build-examples.sh
timeout: 3600s
options:
  machineType: 'N1_HIGHCPU_32'
  diskSizeGb: 512

steps:
  # Create a docker image for the buildpacks `pack` tool
  - name: 'gcr.io/cloud-builders/git'
    args: [
      'clone', '--depth=1',
      'https://github.com/GoogleCloudPlatform/cloud-builders-community',
      'third_party/cloud-builders-community',
    ]
    waitFor: ['-']
    id: 'clone-cloud-builders-community'
  # Workaround a kaniko bug using the "edge" builder:
  #     https://github.com/GoogleContainerTools/kaniko/issues/1058
  - name: 'gcr.io/kaniko-project/executor:edge'
    args: [
        "--context=dir:///workspace/third_party/cloud-builders-community/pack/",
        "--dockerfile=Dockerfile",
        "--destination=gcr.io/${PROJECT_ID}/pack:${SHORT_SHA}",
        "--cache=true",
        "--cache-ttl=48h"
    ]
    waitFor: ['clone-cloud-builders-community']

  # Create the docker images for the buildpacks builder.
  - name: 'gcr.io/kaniko-project/executor:edge'
    args: [
        "--context=dir:///workspace/build_scripts/",
        "--dockerfile=Dockerfile",
        "--destination=gcr.io/${PROJECT_ID}/functions-framework-cpp/runtime:${SHORT_SHA}",
        "--target=gcf-cpp-runtime",
        "--cache=true",
        "--cache-ttl=48h"
    ]
    waitFor: ['-']
    timeout: 1800s
  - name: 'gcr.io/cloud-builders/docker'
    args: ['pull', 'gcr.io/${PROJECT_ID}/functions-framework-cpp/runtime:${SHORT_SHA}']
  - name: 'gcr.io/kaniko-project/executor:edge'
    args: [
        "--context=dir:///workspace/build_scripts/",
        "--dockerfile=Dockerfile",
        "--destination=gcr.io/${PROJECT_ID}/functions-framework-cpp/develop:${SHORT_SHA}",
        "--cache=true",
        "--cache-ttl=48h"
    ]
    waitFor: ['-']
    timeout: 1800s
  - name: 'gcr.io/cloud-builders/docker'
    args: ['pull', 'gcr.io/${PROJECT_ID}/functions-framework-cpp/develop:${SHORT_SHA}']
    # Setup local names for the builder images.
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'gcr.io/${PROJECT_ID}/functions-framework-cpp/develop:${SHORT_SHA}', 'gcf-cpp-develop']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'gcr.io/${PROJECT_ID}/functions-framework-cpp/runtime:${SHORT_SHA}', 'gcf-cpp-runtime']

  # Create the buildpacks builder, and make it the default.
  - name: 'gcr.io/${PROJECT_ID}/pack:${SHORT_SHA}'
    args: ['create-builder', 'gcf-cpp-builder:bionic', '--builder-config', 'pack/builder.toml', ]
  - name: 'gcr.io/${PROJECT_ID}/pack:${SHORT_SHA}'
    args: ['trust-builder', 'gcf-cpp-builder:bionic', ]
  - name: 'gcr.io/${PROJECT_ID}/pack:${SHORT_SHA}'
    args: ['set-default-builder', 'gcf-cpp-builder:bionic', ]
    id: 'gcf-builder-ready'

  # Build the examples using the builder. Keep these in alphabetical order.
  - name: 'gcr.io/${PROJECT_ID}/pack:${SHORT_SHA}'
    waitFor: ['gcf-builder-ready']
    id: 'hello-world'
    args: ['build',
      '--env', 'FUNCTION_SIGNATURE_TYPE=http',
      '--env', 'TARGET_FUNCTION=HelloWorld',
      '--path', 'examples/hello_world',
      'hello-world',
    ]

  - name: 'gcr.io/${PROJECT_ID}/pack:${SHORT_SHA}'
    waitFor: ['gcf-builder-ready']
    id: 'hello-world-rooted'
    args: ['build',
      '--env', 'FUNCTION_SIGNATURE_TYPE=http',
      '--env', 'TARGET_FUNCTION=::HelloWorld',
      '--path', 'examples/hello_world',
      'hello-world-rooted',
    ]


  # Verify generated images are deployable
  - name: 'gcr.io/cloud-builders/docker'
    waitFor: ['hello-world']
    args: ['tag', 'hello-world', 'gcr.io/${PROJECT_ID}/hello-world-${BUILD_ID}:latest']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/hello-world-${BUILD_ID}:latest']
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'deploy',
      'hello-world-${BUILD_ID}',
      '--platform', 'managed',
      '--project', '${PROJECT_ID}',
      '--region', 'us-central1',
      '--image', 'gcr.io/${PROJECT_ID}/hello-world-${BUILD_ID}:latest',
      '--allow-unauthenticated',
    ]
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        URL=$$(gcloud run services list \
            --project=${PROJECT_ID} \
            --platform managed \
            --filter=SERVICE:hello-world-${BUILD_ID} \
            '--format=csv[no-heading](URL)')
        echo "Pinging service at $${URL}"
        curl -sSL --retry 3 "$${URL}"
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'services', 'delete',
      'hello-world-${BUILD_ID}',
      '--platform', 'managed',
      '--project', '${PROJECT_ID}',
      '--region', 'us-central1',
      '--quiet',
    ]
