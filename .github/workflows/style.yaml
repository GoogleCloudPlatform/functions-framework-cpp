name: C++ Lint CI

on:
  push:
    branches: [ main ]
  pull_request:

env:
  vcpkg_SHA: "9b9a6680b25872989c8eb0303d670f32e5cfe6a4"

jobs:
  clang-tidy:
    name: clang-tidy
    runs-on: ubuntu-20.04
    steps:
      - name: install ninja
        run: sudo apt install ninja-build clang-tidy-10
      - uses: actions/checkout@v2
      - name: install-ctcache
        working-directory: "${{runner.temp}}"
        run: >
          mkdir -p ctcache &&
          curl -sSL https://github.com/matus-chochlik/ctcache/archive/0ad2e227e8a981a9c1a6060ee6c8ec144bb976c6.tar.gz |
          tar -C ctcache --strip-components=1 -zxf -
      - name: clone-vcpkg
        working-directory: "${{runner.temp}}"
        run: >
          mkdir -p vcpkg &&
          curl -sSL "https://github.com/microsoft/vcpkg/archive/${{env.vcpkg_SHA}}.tar.gz" |
          tar -C vcpkg --strip-components=1 -zxf -
      - name: save-restore-cache
        id: save-restore-cache
        uses: actions/cache@v2
        with:
          # Preserve the vcpkg binary, the vcpkg binary cache, and clang-tidy's cache in the build cache
          path: |
            ~/.cache/vcpkg
            ~/.cache/bin
            ~/.cache/ctcache
          key: |
            vcpkg-${{ env.vcpkg_SHA }}-style-clang-tidy-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ env.vcpkg_SHA }}-style-clang-tidy-
      - name: boostrap-vcpkg
        run: ci/restore-vcpkg-from-cache.sh "${{runner.temp}}/vcpkg"
      - name: configure
        run: >
          cmake -S . -B "${{runner.temp}}/build"
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          -DCMAKE_TOOLCHAIN_FILE="${{runner.temp}}/vcpkg/scripts/buildsystems/vcpkg.cmake"
      - name: pre-cache-stats
        run: |
          printf "%s: %s\n" "ctcache total size" "$(du -sh "${HOME}/.cache/ctcache")"
          printf "%s: %s\n" "ctcache  num files" "$(find "${HOME}/.cache/ctcache" | wc -l)"
          printf "%s: %s\n" "total size" "$(du -sh "${HOME}/.cache")"
          printf "%s: %s\n" " num files" "$(find "${HOME}/.cache" | wc -l)"
      - name: tidy
        run: >
          export CTCACHE_DIR="${HOME}/.cache/ctcache";
          git ls-files -z |
          grep -zE '\.cc$' |
          xargs --verbose -P 2 -n 1 -0 "${{runner.temp}}/ctcache/clang-tidy-cache" clang-tidy-10 -p="${{runner.temp}}/build"
      - name: post-cache-stats
        run: |
          printf "%s: %s\n" "ctcache total size" "$(du -sh "${HOME}/.cache/ctcache")"
          printf "%s: %s\n" "ctcache  num files" "$(find "${HOME}/.cache/ctcache" | wc -l)"
          printf "%s: %s\n" "total size" "$(du -sh "${HOME}/.cache")"
          printf "%s: %s\n" " num files" "$(find "${HOME}/.cache" | wc -l)"

  werror-build:
    # Using a blank name produces better output on
    # the web UI than any other alternative we tried.
    name: " "
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        compiler: [
          {"cxx": "clang++-10", "cc": "clang-10"},
          {"cxx": "g++-10", "cc": "gcc-10" },
        ]
    steps:
      - name: install ninja
        run: sudo apt install ninja-build
      - uses: actions/checkout@v2
      - name: clone-vcpkg
        working-directory: "${{runner.temp}}"
        run: >
          mkdir -p vcpkg &&
          curl -sSL "https://github.com/microsoft/vcpkg/archive/${{env.vcpkg_SHA}}.tar.gz" |
          tar -C vcpkg --strip-components=1 -zxf -
      - name: cache-vcpkg
        id: cache-vcpkg
        uses: actions/cache@v2
        with:
          # Preserve the vcpkg binary *and* the vcpkg binary cache in the build cache
          path: |
            ~/.cache/vcpkg
            ~/.cache/bin
          key: |
            vcpkg-${{ env.vcpkg_SHA }}-werror-${{ matrix.compiler.cxx }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ env.vcpkg_SHA }}-werror-${{ matrix.compiler.cxx }}-
      - name: boostrap-vcpkg
        run: ci/restore-vcpkg-from-cache.sh "${{runner.temp}}/vcpkg"
      - name: compiler=${{matrix.sanitizer}} / configure
        run: >
          cmake -S . -B "${{runner.temp}}/build" -GNinja
          -DFUNCTIONS_FRAMEWORK_CPP_ENABLE_WERROR=ON
          -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
          -DCMAKE_C_COMPILER=${{matrix.compiler.cc}}
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          -DCMAKE_TOOLCHAIN_FILE="${{runner.temp}}/vcpkg/scripts/buildsystems/vcpkg.cmake"
      - name: compiler=${{matrix.compiler.cxx}} / build
        run: cmake --build "${{runner.temp}}/build"
      - name: compiler=${{matrix.compiler.cxx}} / test
        working-directory: "${{runner.temp}}/build"
        run: ctest --output-on-failure --timeout=60s

  clang-format:
    name: clang-format
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: clang-format
        run: git ls-files -z | grep -zE '\.(cc|h)$' | xargs -P 2 -n 50 -0 clang-format-10 -i
      - name: check-diff
        run: git diff --ignore-submodules=all --color --exit-code .

  cmake-format:
    name: cmake-format
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: install cmake-format
        run: pip install cmakelang==0.6.13
      - name: cmake-format
        run: >
          git ls-files -z | grep -zE '((^|/)CMakeLists\.txt|\.cmake)$' |
          xargs -P 2 -n 1 -0 /home/runner/.local/bin/cmake-format -i
      - name: check-diff
        run: git diff --ignore-submodules=all --color --exit-code .

  generated-files:
    name: generated-files
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: regenerate-build-examples
        run: >
          ./ci/generate-build-examples.sh >ci/build-examples.yaml
      - name: regenerate-buildpacks
        run: >
          ./build_scripts/pack/generate-builder.sh 2020 gcf-cpp- pack
      - name: regenerate-buildpacks
        run: >
          ./build_scripts/pack/generate-builder.sh 2021 ci- ci/pack
      - name: check-diff
        run: git diff --ignore-submodules=all --color --exit-code .
