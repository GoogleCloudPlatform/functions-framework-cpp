name: images

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  base-images:
    name: base-images
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup-buildx
        uses: docker/setup-buildx-action@v1

      - name: docker-cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-images-${{ github.sha }}
          restore-keys: |
            buildx-${{ runner.os }}-images-

      - name: docker-build-runtime
        uses: docker/build-push-action@v2
        with:
          push: false
          outputs: type=docker,dest=/tmp/gcf-cpp-runtime.tar
          tags: gcf-cpp-runtime
          context: build_scripts
          file: build_scripts/Dockerfile
          target: gcf-cpp-runtime
          cache-from: type=local,src=/tmp/.buildx-cache/runtime
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache/runtime

      - name: docker-build-develop
        uses: docker/build-push-action@v2
        with:
          push: false
          outputs: type=docker,dest=/tmp/gcf-cpp-develop.tar
          tags: gcf-cpp-develop
          context: build_scripts
          file: build_scripts/Dockerfile
          target: gcf-cpp-develop
          cache-from: type=local,src=/tmp/.buildx-cache/develop
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache/develop

      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: gcf-base-images
          path: |
            /tmp/gcf-cpp-runtime.tar
            /tmp/gcf-cpp-develop.tar

  hello-word-examples:
    name: hello-world-examples
    runs-on: ubuntu-latest
    needs: ["base-images"]
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: download
        uses: actions/download-artifact@v2

      - name: docker-load-runtime
        run: |
          docker load --input gcf-base-images/gcf-cpp-runtime.tar

      - name: docker-load-develop
        run: |
          docker load --input gcf-base-images/gcf-cpp-develop.tar

      - name: setup-pack
        run: >
          curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.15.1/pack-v0.15.1-linux.tgz" |
          sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack

      - name: setup-pack-builder
        run: >
          pack create-builder gcf-cpp-builder:bionic --config pack/builder.toml
          && pack trust-builder gcf-cpp-builder:bionic
          && pack set-default-builder gcf-cpp-builder:bionic

      - name: build-examples-hello-cloud-event
        run: >
          pack build \
            --env FUNCTION_SIGNATURE_TYPE=cloudevent \
            --env TARGET_FUNCTION=HelloCloudEvent \
            --path examples/hello_cloud_event \
            examples-hello-cloud-event;
          docker image rm examples-hello-cloud-event:latest

      - name: build-examples-multiple-sources
        run: >
          pack build \
            --env FUNCTION_SIGNATURE_TYPE=http \
            --env TARGET_FUNCTION=HelloMultipleSources \
            --path examples/hello_multiple_sources \
            examples-hello-multiple-sources;
          docker image rm examples-hello-multiple-sources:latest

      - name: build-examples-hello-with-third-party
        run: >
          pack build \
            --env FUNCTION_SIGNATURE_TYPE=http \
            --env TARGET_FUNCTION=HelloWithThirdParty \
            --path examples/hello_with_third_party \
            examples-hello-with-third-party;
          docker image rm examples-hello-with-third-party:latest

      - name: build-examples-hello-gcs
        run: >
          pack build \
            --env FUNCTION_SIGNATURE_TYPE=http \
            --env TARGET_FUNCTION=HelloGcs \
            --path examples/hello_gcs \
            examples-hello-gcs;
          docker image rm examples-hello-gcs:latest

      - name: build-examples-hello-world
        run: >
          pack build \
            --env FUNCTION_SIGNATURE_TYPE=http \
            --env TARGET_FUNCTION=HelloWorld \
            --path examples/hello_world \
            examples-hello-world

      - name: test-examples-hello-world
        run: >
          ID=$(docker run --detach --network host examples-hello-world --port 8080) &&
          curl -sS --retry 3 --retry-delay 2 http://localhost:8080/say/hello &&
          docker kill "${ID}"

      - name: build-examples-hello-world-rooted
        run: >
          pack build \
            --env FUNCTION_SIGNATURE_TYPE=http \
            --env TARGET_FUNCTION=::HelloWorld \
            --path examples/hello_world \
            examples-hello-world-rooted;
          docker image rm examples-hello-world-rooted:latest

      - name: build-examples-hello-from-namespace
        run: >
          pack build \
            --env FUNCTION_SIGNATURE_TYPE=http \
            --env TARGET_FUNCTION=hello_from_namespace::HelloWorld \
            --path examples/hello_from_namespace \
            examples-hello-from-namespace;
          docker image rm examples-hello-from-namespace:latest

      - name: build-examples-hello-from-namespace-rooted
        run: >
          pack build \
            --env FUNCTION_SIGNATURE_TYPE=http \
            --env TARGET_FUNCTION=::hello_from_namespace::HelloWorld \
            --path examples/hello_from_namespace \
            examples-hello-from-namespace-rooted;
          docker image rm examples-hello-from-namespace-rooted:latest

      - name: build-examples-hello-from-nested-namespace
        run: >
          pack build \
            --path examples/hello_from_nested_namespace \
            --env FUNCTION_SIGNATURE_TYPE=http \
            --env TARGET_FUNCTION=hello_from_nested_namespace::ns0::ns1::HelloWorld \
            examples-hello-from-nested-namespace;
          docker image rm examples-hello-from-nested-namespace:latest

  site-examples:
    name: site-examples
    runs-on: ubuntu-latest
    needs: ["base-images"]
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: download
        uses: actions/download-artifact@v2

      - name: docker-load-runtime
        run: |
          docker load --input gcf-base-images/gcf-cpp-runtime.tar

      - name: docker-load-develop
        run: |
          docker load --input gcf-base-images/gcf-cpp-develop.tar

      - name: setup-pack
        run: >
          curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.15.1/pack-v0.15.1-linux.tgz" |
          sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack

      - name: setup-pack-builder
        run: >
          pack create-builder gcf-cpp-builder:bionic --config pack/builder.toml
          && pack trust-builder gcf-cpp-builder:bionic
          && pack set-default-builder gcf-cpp-builder:bionic

      - name: build-examples-site
        run: >
          for example in examples/site/*; do
            function="$(basename "${example}")";
            signature="http";
            if grep -q gcf::CloudEvent ${example}/*; then
              signature="cloudevent";
            fi;
            pack build \
                --env "TARGET_FUNCTION=${function}" \
                --env "FUNCTION_SIGNATURE_TYPE=${signature}" \
                --path "${example}" \
                "examples-site-${function}";
            docker image rm "examples-site-${function}:latest";
          done
